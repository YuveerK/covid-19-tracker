{"version":3,"sources":["assets/logo.svg","components/Chart.js","components/Table.js","components/Card.js","assets/globe.png","components/TopBar.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","GraphContainer","Chart","data","errorMessage","state","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","ErrorMessage","length","height","Table","row","tableData","map","country","title","active","cases","activePerOneMillion","casesPerOneMillion","continent","critical","criticalPerOneMillion","deaths","deathsPerOneMillion","oneCasePerPeople","oneDeathPerPeople","oneTestPerPeople","population","recovered","recoveredPerOneMillion","tests","testsPerOneMillion","todayCases","todayDeaths","todayRecovered","columns","name","selector","sortable","grow","oneDeathPerPeopl","pagination","Cards","Icon","i","Text","p","Number","h1","SubText","Card","icon","heading","currentNumber","totalNumber","subHeading","className","separator","duration","end","WeatherLeft","WeatherRight","ImageCountry","img","WeatherContainer","TableContentContainer","HeadingContainer","CountryInfoContainer","LeftCountryInfo","CardContentContainer","RightCountryInfo","CountryHeading","Ul","ul","Li","li","HeadingContentContainer","Heading","ImageHeading","TableContainer","ChartContainer","Left","Right","TitleContainer","Title","Image","CardContainer","Select","select","Option","option","TopBar","useState","countries","setCountries","countryInfo","setCountryInfo","countryDetailedInfo","setCountryDetailedInfo","setData","vaccineNum","setVaccineNum","setTableData","ctyCode","setCtyCode","global","image","setImage","countryLanguages","setCountryLanguages","iso3Code","setIso3Code","cord","setCord","weather","setWeather","temperature","setTemperature","countryCode","countryInfoDecider","useEffect","a","fetch","then","response","json","getTableData","country_url","languages","borders","error","getCountryData","lat","long","main","console","log","chartData","buildChartData","total","fetchData","isocode","iso3","getCountriesData","lastDataPoint","date","newDataPoint","x","y","push","onCountryChange","event","target","url","flag","alert","url2","timeline","url3","src","logo","onChange","description","Math","round","temp","nativeName","capital","region","currency","currencies","code","symbol","language","demonym","numericCode","callingCodes","timeZone","timezones","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb6c72b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.55d91961.svg\";","import styled from \"styled-components\";\r\nimport {  Line, Bar } from 'react-chartjs-2'\r\nimport numeral from \"numeral\";\r\nimport { ErrorMessage } from \"./TopBar\";\r\nconst Chart = ({ data, errorMessage }) => {\r\n \r\n    const state = {\r\n        \r\n        datasets: [\r\n          {\r\n            label: 'Daily New: Covid-19 Cases',\r\n            fill: false,\r\n            lineTension: 0.4,\r\n            backgroundColor: 'darkgreen',\r\n            borderColor: 'red',\r\n            borderWidth: 1,\r\n            data: data\r\n          }\r\n        ]\r\n      }\r\n\r\n      const options = {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 2,\r\n          },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: \"time\",\r\n              time: {\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                // Include a dollar sign in the ticks\r\n                callback: function (value, index, values) {\r\n                  return numeral(value).format(\"0a\");\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n\r\n    return (\r\n      \r\n\r\n            <Container>\r\n                <GraphContainer>\r\n                  <ErrorMessage>{errorMessage}</ErrorMessage>\r\n                  {data?.length > 0 && (\r\n                    <Line height = \"100%\"\r\n                       data={state}\r\n                        options={options}                       \r\n                    />\r\n                  )}\r\n                </GraphContainer>\r\n            </Container>\r\n        \r\n    )\r\n}\r\n\r\nexport const Container = styled.div `\r\n    position: relative;\r\n    width: 100%;\r\n    margin:auto;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 100px;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;    \r\n    border-radius: 15px;  \r\n\r\n`;\r\n\r\nexport const GraphContainer = styled.div `\r\n    position: relative;\r\n    width: 100%;\r\n    height: 500px;\r\n`;\r\n\r\nexport default Chart\r\n","import styled from \"styled-components\";\r\nimport Numeral from \"react-numeral\";\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\nconst Table = ({tableData}) => {\r\n    const columns = [\r\n        {\r\n            name: 'Title',\r\n            selector: row => row.title,\r\n            sortable: true,\r\n            grow: 3\r\n        },\r\n        {\r\n            name: 'Active',\r\n            selector: row => row.active,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Cases',\r\n            selector: row => row.cases,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Cases Active Per 1 Million',\r\n            selector: row => row.casesPerOneMillion,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Continent',\r\n            selector: row => row.continent,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Critical',\r\n            selector: row => row.critical,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Critical Per One Million',\r\n            selector: row => row.criticalPerOneMillion,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Deaths',\r\n            selector: row => row.deaths,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Deaths Per 1 Million',\r\n            selector: row => row.deathsPerOneMillion,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'One Case Per People',\r\n            selector: row => row.oneCasePerPeople,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'One Death Per People',\r\n            selector: row => row.oneDeathPerPeopl,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'One Test Per People',\r\n            selector: row => row.oneTestPerPeople,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Population',\r\n            selector: row => row.population,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Recovered',\r\n            selector: row => row.recovered,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Recovered Per One Million',\r\n            selector: row => row.recoveredPerOneMillion,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Tests',\r\n            selector: row => row.tests,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Tests Per One Million',\r\n            selector: row => row.testsPerOneMillion,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Today Cases',\r\n            selector: row => row.todayCases,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Today Deaths',\r\n            selector: row => row.todayDeaths,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Today Recovered',\r\n            selector: row => row.todayRecovered,\r\n            sortable: true,\r\n        },\r\n        \r\n        \r\n    ];\r\n    \r\n    const countries = tableData.map ((country)=> (\r\n        {\r\n            title: country.country,\r\n            active: country.active,\r\n            cases: country.cases,\r\n            activePerOneMillion: country.activePerOneMillion,\r\n            cases: country.cases,\r\n            casesPerOneMillion: country.casesPerOneMillion,\r\n            continent: country.continent,\r\n            critical: country.critical,\r\n            criticalPerOneMillion: country.criticalPerOneMillion,\r\n            deaths: country.deaths,\r\n            deathsPerOneMillion: country.deathsPerOneMillion,\r\n            oneCasePerPeople: country.oneCasePerPeople,\r\n            oneDeathPerPeopl: country.oneDeathPerPeople,\r\n            oneTestPerPeople: country.oneTestPerPeople,\r\n            population: country.population,\r\n            recovered: country.recovered,\r\n            recoveredPerOneMillion: country.recoveredPerOneMillion,\r\n            tests: country.tests,\r\n            testsPerOneMillion: country.testsPerOneMillion,\r\n            todayCases: country.todayCases,\r\n            todayDeaths: country.todayDeaths,\r\n            todayRecovered: country.todayRecovered\r\n\r\n        }\r\n    ))\r\n\r\n    const row = countries;\r\n    \r\n\r\n \r\n    return (\r\n        <DataTable\r\n            columns={columns}\r\n            data={row}\r\n            pagination \r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Table\r\n","import styled from \"styled-components\";\r\nimport Numeral from 'react-numeral';\r\nimport CountUp from 'react-countup';\r\nimport React from 'react'\r\n\r\nconst Card = ({ icon, heading, currentNumber, totalNumber, subHeading }) => {\r\n    return (\r\n        <Cards>\r\n            <Icon className={icon}></Icon>\r\n            <Text>\r\n                {heading}\r\n            </Text>\r\n            <Number>\r\n            <CountUp separator= ',' duration={1} end={currentNumber}/>\r\n            </Number>\r\n            <SubText>\r\n            <CountUp separator= ',' duration={1} end={totalNumber}/> total\r\n\r\n            </SubText>\r\n        </Cards>\r\n    )\r\n}\r\n\r\nexport const Cards=styled.div`\r\n    width: 250px;\r\n    height: 250px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    flex-direction: column;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;   \r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin:20px;\r\n    \r\n\r\n`;\r\n\r\nexport const Icon=styled.i`\r\n    font-size: 3rem;  \r\n    color:green;  \r\n\r\n`;\r\nexport const Text=styled.p`\r\n    text-align: center;\r\n    \r\n\r\n`;\r\n\r\n\r\nexport const Number=styled.h1`\r\n    \r\n    \r\n\r\n`;\r\n\r\n\r\nexport const SubText=styled.p`\r\n    \r\n    \r\n\r\n`;\r\n\r\nexport default Card\r\n","export default __webpack_public_path__ + \"static/media/globe.a860f293.png\";","import styled from \"styled-components\";\r\nimport logo from \"../assets/logo.svg\";\r\nimport React, {useState, useEffect} from 'react'\r\nimport Chart from \"./Chart\";\r\nimport Table from \"../components/Table\"\r\nimport Cards, { Icon } from \"./Card\"\r\nimport global from \"../assets/globe.png\"\r\nimport CountUp from \"react-countup\";\r\nimport DataTable from 'react-data-table-component';\r\nimport Map from \"./Map\";\r\n\r\n\r\n\r\nconst TopBar = () => {\r\n    const [countries, setCountries] = useState ([]);\r\n    const [countryInfo, setCountryInfo]= useState ([]);\r\n    const [countryDetailedInfo, setCountryDetailedInfo]= useState ([]);\r\n    let [data, setData] = useState ({});\r\n    const [vaccineNum, setVaccineNum] = useState({})\r\n    const [tableData, setTableData] = useState ([]);\r\n    const [ctyCode, setCtyCode] = useState (\"World Wide\")\r\n    const [image, setImage] = useState (`${global}`)\r\n    const [countryLanguages, setCountryLanguages] = useState ([])\r\n    const [countryName, setCountryName] = useState (\"\")\r\n    const [iso3Code, setIso3Code] = useState(\"\")\r\n    const [cord, setCord] = useState({});\r\n    const [weather, setWeather] = useState({})\r\n    const [temperature, setTemperature] = useState({})\r\n    let countryCode= ``;\r\n    let countryInfoDecider = false;\r\n    const title = \"\"\r\n    const row = \r\n\r\n\r\n//Get's table data for the table    \r\nuseEffect (() => {\r\n    const getTableData = async () => {\r\n        fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            setTableData(data)\r\n        })\r\n    }\r\n    getTableData()\r\n}, [])\r\n\r\n//Use effect that sends a request everytime the country changes in the drop down menu.\r\n//The iso3 code is cast as a variable into the link.\r\nuseEffect (() => {\r\n    const getCountryData = async () => {\r\n        const country_url = `https://restcountries.eu/rest/v2/alpha?codes=${iso3Code}`\r\n            await fetch (country_url)\r\n            .then ((response) => {\r\n                return response.json()\r\n            })\r\n            .then ((data) => {\r\n                try {\r\n                    let languages = data[0].languages\r\n                    let borders = data [0].borders\r\n                    setCountryLanguages(languages)\r\n                    setCountryDetailedInfo (data)\r\n                    \r\n                } catch (error) {\r\n                    countryInfoDecider = true\r\n                    setCountryLanguages([])\r\n                    setCountryDetailedInfo ([])\r\n                }\r\n            })\r\n    }\r\n    getCountryData()\r\n}, [iso3Code])\r\n\r\n//Use effect that sends a request everytime the country changes in the drop down menu.\r\n//The iso3 code is cast as a variable into the link.\r\nuseEffect (() => {\r\n    const getCountryData = async () => {\r\n        const country_url = `http://api.openweathermap.org/data/2.5/weather?lat=${cord.lat}&lon=${cord.long}&units=metric&appid=9593eca72eb8c1dbf309188937a446d7`\r\n            await fetch (country_url)\r\n            .then ((response) => {\r\n                return response.json()\r\n            })\r\n            .then ((data) => {\r\n                try {\r\n                   setWeather(data.weather[0])\r\n                   setTemperature(data.main)\r\n                   \r\n                    \r\n                } catch (error) {\r\n                    \r\n                }\r\n            })\r\n    }\r\n    getCountryData()\r\n}, [cord])\r\nconsole.log(weather)\r\n// console.log(temperature)\r\n\r\n\r\n//Loads initial world data\r\n    useEffect( ()=> {\r\n        \r\n        async function fetchData() {\r\n            //fetches initial global data\r\n                await fetch (\"https://disease.sh/v3/covid-19/all\")\r\n                .then ((response) => response.json())\r\n                .then ((data) => {\r\n                    setCountryInfo(data)\r\n                });   \r\n                \r\n                //fetches chart data\r\n                await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=90`)\r\n                  .then((response) => {\r\n                    return response.json();\r\n                  })\r\n                  .then((data) => {\r\n                    let chartData = buildChartData(data);\r\n                    setData(chartData);\r\n                  });\r\n    \r\n                  //Fetches vaccine data\r\n                  await fetch (\"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1&fullData=true\")\r\n                  .then ((response) => response.json())\r\n                  .then ((data) => {\r\n                    setVaccineNum(data[0].total)\r\n                });               \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    //populates dropdown list\r\n    useEffect (() => {\r\n        const getCountriesData = async () => {\r\n            await fetch (\"https://disease.sh/v3/covid-19/countries\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const countries = data.map ((country)=> (\r\n                    {\r\n                        name: country.country,\r\n                        isocode: country.countryInfo.iso3\r\n                    }\r\n                ))\r\n                setCountries(countries)\r\n            })\r\n        }\r\n        getCountriesData();\r\n    }, [])\r\n\r\n\r\n    //function that calculates the daily new cases by taking current date and subtracting the previous dates cases.\r\n    //This data is then passed onto the graph.\r\n    const buildChartData = (data) => {\r\n        let chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data.cases) {\r\n          if (lastDataPoint) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y: data['cases'][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n          lastDataPoint = data['cases'][date];\r\n        }\r\n        return chartData;\r\n      };\r\n\r\n      \r\n      \r\n//Runs api call based on value selected from list\r\n    const onCountryChange = async (event) => {\r\n         countryCode = event.target.value;\r\n         setCtyCode(countryCode)\r\n        \r\n\r\n        if (countryCode === 'worldwide') {\r\n            setImage (`${global}`)\r\n            setCtyCode(\"World Wide\")\r\n            setCountryLanguages([])\r\n            setCountryDetailedInfo ([])\r\n            await fetch (\"https://disease.sh/v3/covid-19/all\")\r\n                .then ((response) => response.json())\r\n                .then ((data) => {\r\n                    setCountryInfo(data)\r\n                }); \r\n        } else {\r\n            const url= `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n            await fetch (url)\r\n            .then((response) => response.json())\r\n            .then(data => {\r\n                setCountryInfo(data)\r\n                setImage(data.countryInfo.flag)\r\n                setIso3Code(data.countryInfo.iso3)\r\n                setCord(data.countryInfo)\r\n            })           \r\n        }\r\n\r\n        if (countryCode === 'worldwide') {\r\n            //Runs call to fetch chart data when option is selected\r\n            try {\r\n                const url2_2 =  `https://disease.sh/v3/covid-19/historical/all?lastdays=90`\r\n    \r\n            await fetch(url2_2)\r\n                  .then((response) => {\r\n                    return response.json();\r\n                  })\r\n                  .then((data) => {    \r\n                    let chartData = buildChartData(data)\r\n                    setData(chartData);                \r\n                  });\r\n                  \r\n            } catch (error) {\r\n                alert('No hisorical chart data found, graph is populated with last dataset')\r\n            }\r\n\r\n        } else {\r\n\r\n            //Runs call to fetch chart data when option is selected\r\n            try {\r\n                const url2 =  `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=90`\r\n    \r\n            await fetch(url2)\r\n                  .then((response) => {\r\n                    return response.json();\r\n                  })\r\n                  .then((data) => {  \r\n                    let chartData = buildChartData(data.timeline)\r\n                    setData(chartData);                \r\n                  });\r\n                  \r\n            } catch (error) {\r\n                setData([])\r\n            }\r\n        }\r\n        //Get's vaccine data when country is select\r\n        try {\r\n            const url3 = countryCode ==='worldwide' ? 'https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1&fullData=true' : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${countryCode}?lastdays=1&fullData=true`\r\n\r\n        await fetch(url3)\r\n            .then((response) => response.json())\r\n            .then ((data) => {\r\n                countryCode === 'worldwide' ? setVaccineNum(data[0].total) : setVaccineNum(data.timeline[0].total)\r\n            })\r\n        } catch (error) { \r\n            setVaccineNum({})\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n             \r\n            <TitleContainer>\r\n                        <Image src={logo} />\r\n                    <Title>\r\n                        \r\n                        COVID-19 Tracker\r\n                    </Title>\r\n\r\n                    <Select onChange={onCountryChange}>\r\n                        <Option value=\"worldwide\">World Wide</Option>\r\n                        {countries.map((country)=> (\r\n                            <Option value={country.isocode}>{country.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n            </TitleContainer>            \r\n                    <Left>\r\n                        <HeadingContainer>\r\n                                <HeadingContentContainer>\r\n                                        <Heading>\r\n                                            {countryInfo.country}\r\n                                        </Heading>\r\n\r\n                                        \r\n                                        <ImageHeading src={image} />\r\n                                        \r\n                                        <CountryHeading>Population</CountryHeading>        \r\n                                            <Heading>\r\n                                                <CountUp separator= ',' duration={3} end={countryInfo.population}/> \r\n                                            </Heading>\r\n\r\n                                        <CountryHeading>Weather</CountryHeading>\r\n                                        \r\n                                        \r\n                                        <WeatherContainer>\r\n                                            <WeatherLeft>\r\n                                                <ImageCountry src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`} />\r\n                                            </WeatherLeft>\r\n\r\n                                            <WeatherRight>\r\n                                                <Heading>\r\n                                                    {weather.description}\r\n                                                </Heading>\r\n                                                <Heading>\r\n                                                    {`${Math.round(temperature.temp, 1)} °C`}\r\n                                                </Heading>\r\n                                                \r\n                                            </WeatherRight>\r\n                                        </WeatherContainer>\r\n\r\n\r\n                                    \r\n                                    {countryDetailedInfo.length> 0 &&\r\n                                    <CountryInfoContainer>\r\n                                            <LeftCountryInfo>\r\n                                            {countryDetailedInfo.length > 0 && <CountryHeading>Native Name</CountryHeading>}        \r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((name) => (\r\n                                                        <Li key={name}>{name.nativeName} </Li>\r\n                                                    ))}\r\n\r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Capital</CountryHeading>}\r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((name) => (\r\n                                                        <Li key={name}>{name.capital} </Li>\r\n                                                    ))}\r\n\r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Region</CountryHeading>}\r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((name) => (\r\n                                                        <Li key={name}>{name.region} </Li>\r\n                                                    ))}\r\n\r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Currencies</CountryHeading>}\r\n                                                <Ul>\r\n                                                    \r\n                                                    {countryDetailedInfo.map ((currency, index) => (\r\n                                                        <Li key={currency}>\r\n                                                            {currency.currencies[index].code}\r\n                                                            \r\n                                                        </Li>\r\n                                                    ))}\r\n                                                    {countryDetailedInfo.map ((currency, index) => (\r\n                                                        <Li key={currency}>\r\n                                                            {currency.currencies[index].name}\r\n                                                            \r\n                                                        </Li>\r\n                                                    ))}\r\n                                                    {countryDetailedInfo.map ((currency, index) => (\r\n                                                        <Li key={currency}>\r\n                                                            {currency.currencies[index].symbol}\r\n                                                            \r\n                                                        </Li>\r\n                                                    ))}\r\n\r\n                                                </Ul>\r\n                                            </LeftCountryInfo>\r\n\r\n                                        <RightCountryInfo>\r\n                                            {countryLanguages.length > 0 && <CountryHeading>Languages</CountryHeading>}\r\n                                                <Ul>\r\n                                                {countryInfoDecider === false \r\n                                                ? countryLanguages.map ((language) => (\r\n                                                        <Li key={language}>{language.name} </Li>          \r\n                                                        ))\r\n                                                : <Li>\"\"</Li>\r\n                                                    } \r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Demonym</CountryHeading>}\r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((demonym) => (\r\n                                                        <Li key={demonym}>{demonym.demonym} </Li>          \r\n                                                        ))}\r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Numeric Code</CountryHeading>}\r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((numericCode, index) => (\r\n                                                        <Li key={numericCode}>+{numericCode.callingCodes[index]} </Li>          \r\n                                                        ))}\r\n                                                </Ul>\r\n                                                \r\n                                                {countryDetailedInfo.length > 0 && <CountryHeading>Time Zone</CountryHeading>}\r\n                                                <Ul>\r\n                                                    {countryDetailedInfo.map ((timeZone, index) => (\r\n                                                        <Li key={timeZone}>{timeZone.timezones[index]} </Li>          \r\n                                                        ))}\r\n                                                </Ul>\r\n                                        </RightCountryInfo>\r\n                                    </CountryInfoContainer>   \r\n                                    }                         \r\n                            </HeadingContentContainer>\r\n                        </HeadingContainer>\r\n\r\n                        <CardContainer>\r\n                            \r\n                            <CardContentContainer>\r\n\r\n                                <Cards \r\n                                    icon=\"fas fa-vials\"\r\n                                    heading=\"Tests Conducted - As of Today\"\r\n                                    currentNumber = {countryInfo.tests}\r\n                                    subHeading=\"total\" \r\n                                />\r\n                                \r\n                                <Cards \r\n                                    icon=\"fas fa-user-plus\"\r\n                                    heading=\"COVID-19 Cases - As Of Today\"\r\n                                    currentNumber = {countryInfo.todayCases ? countryInfo.todayCases : \"0\" } \r\n                                    totalNumber ={countryInfo.cases}\r\n                                    subHeading=\"total\"                                \r\n                                />\r\n                                \r\n                                <Cards \r\n                                    icon=\"fas fa-heartbeat\"\r\n                                    heading=\"COVID-19 Deaths - Today\"\r\n                                    \r\n                                    currentNumber = {countryInfo.todayDeaths ? countryInfo.todayDeaths : \"0\"}\r\n                                    totalNumber ={countryInfo.deaths}\r\n                                    subHeading=\"total\"                               \r\n                                />        \r\n                                \r\n                                <Cards \r\n                                    icon=\"fas fa-praying-hands\"\r\n                                    heading=\"COVID-19 Recovered Cases - Today\"\r\n                                    currentNumber = {countryInfo.todayRecovered ? countryInfo.todayRecovered : \"0\"}\r\n                                    totalNumber ={countryInfo.recovered}\r\n                                    subHeading=\"total\"                               \r\n                                />        \r\n                                \r\n                                <Cards \r\n                                    icon=\"fas fa-syringe\"\r\n                                    heading=\"Vaccines Administered\"\r\n                                    currentNumber = {vaccineNum} \r\n                                    subHeading=\"total\"                              \r\n                                />        \r\n                            </CardContentContainer>\r\n                                               \r\n                        </CardContainer>\r\n\r\n                        <ChartContainer>\r\n                            <Chart data={data} errorMessage={data.length === 0 ? `No Timeline Data of ${ctyCode} to display` : \"\"}/>\r\n                        </ChartContainer>\r\n\r\n                    </Left>\r\n\r\n                \r\n                    <Right>\r\n                        \r\n                        \r\n                        <TableContainer>\r\n                            <CountryHeading> Data Table Summarising COVID-19 Statistics Globally </CountryHeading>\r\n\r\n                            <TableContentContainer>\r\n                                <Table tableData = {tableData} />\r\n                            </TableContentContainer>\r\n\r\n                        </TableContainer>\r\n                    </Right>\r\n                    \r\n                    {/* <Map data={tableData}/> */}\r\n        </Container>\r\n\r\n        \r\n   \r\n    )\r\n}\r\n\r\nexport const WeatherLeft=styled.div`\r\n    width: 100px;\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n`;\r\nexport const WeatherRight=styled.div`\r\n    text-align: center;\r\n\r\n`;\r\nexport const ImageCountry=styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n    \r\n\r\n`;\r\n\r\nexport const WeatherContainer=styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;   \r\n    padding: 20px;\r\n    border-radius: 8px;\r\n\r\n`;\r\nexport const TableContentContainer=styled.div`\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n    \r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n\r\n    &::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n`;\r\n\r\n\r\nexport const Icons=styled.i`\r\n    font-size: 1rem;  \r\n    color:green; \r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 20px;\r\n\r\n`;\r\n\r\nexport const HeadingContainer=styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    height: fit-content;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: lightgrey;\r\n    padding: 15px;\r\n    flex-direction: column;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;      \r\n     @media (max-width: 280px) {\r\n          \r\n      }\r\n`;\r\n\r\nexport const CountryInfoContainer=styled.div`\r\n      width: 100%;\r\n      height: 200px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      margin-top: 20px;\r\n      padding: 20px;\r\n      overflow-y: scroll;\r\n      background-color: rgb(226, 226, 226);\r\n      border-radius: 10px;\r\n\r\n\r\n      @media (max-width: 560PX) {\r\n          flex-direction: column;\r\n      }\r\n`;\r\n\r\nexport const LeftCountryInfo=styled.div`\r\n        \r\n         padding:0;\r\n         \r\n`;\r\n\r\nexport const CardContentContainer=styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    flex-wrap: wrap;\r\n    margin-top: 50px;\r\n`;\r\nexport const RightCountryInfo=styled.div`\r\n       \r\n`;\r\n\r\nexport const ErrorMessage=styled.p`\r\n    font-size: 2rem;\r\n    color: red;\r\n`;\r\nexport const CountryHeading=styled.h1`\r\n    font-weight: 300 bold;\r\n    font-size: 1rem;\r\n    margin-top: 20px;\r\n`;\r\nexport const Ul=styled.ul`\r\n        \r\n`;\r\nexport const Li=styled.li`\r\n    list-style: none;\r\n    padding-left: 20px;\r\n`;\r\nexport const HeadingContentContainer=styled.div`\r\n    width: 500px;\r\n    height: fit-content;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;   \r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 280px) {\r\n        width: 100%;\r\n        flex-direction: column;\r\n    }\r\n\r\n    @media (max-width: 550px) {\r\n            width: 100%;\r\n            flex-direction: column;\r\n        }\r\n\r\n\r\n    img {\r\n        width: 200px;\r\n        height: 100%;\r\n        object-fit: cover;\r\n    }\r\n\r\n   \r\n`;\r\nexport const Heading=styled.h1`\r\n    font-weight: 300;\r\n   \r\n`;\r\nexport const ImageHeading=styled.img`\r\n    margin-top: 20px;\r\n   \r\n`;\r\nexport const TableContainer=styled.div`\r\n    width: 99%;\r\n    margin: auto;\r\n    height: fit-content;\r\n    margin-top: 100px;\r\n    box-shadow: 0px 0px 11px 3px #9d9d9d;   \r\n    border-radius: 10px;\r\n    padding: 15px;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n\r\n    \r\n    &::-webkit-scrollbar {\r\n    display: none;\r\n    }\r\n    \r\n    @media (max-width: 900px) {\r\n        margin-top: 100px;\r\n    }\r\n`;\r\n\r\nexport const ChartContainer=styled.div`\r\n    position:relative;\r\n    width: 80%;\r\n    margin:auto;\r\n    \r\n    height: 100%;\r\n   \r\n`;\r\n\r\nexport const Left=styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n       \r\n    margin-top: 120px;\r\n    border-radius: 10px;\r\n    @media (max-width: 540px) {\r\n     margin-top: 150px;   \r\n    }\r\n\r\n`;\r\nexport const Right=styled.div`\r\n    flex: 0.2;\r\n    max-height: fit-content;\r\n    padding: 20px;\r\n    @media (max-width: 900px) {\r\n        margin-top: 80px;\r\n    }\r\n`;\r\nexport const TitleContainer=styled.div`\r\n    width: 100%;\r\n    height: fit-content;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    padding: 20px;\r\n    position: fixed;\r\n    z-index: 9999;\r\n    top: 0;\r\n    background-color: white;\r\n\r\n    @media (max-width: 280px) {\r\n        \r\n    }\r\n\r\n    @media (max-width: 540px) {\r\n        \r\n    }\r\n\r\n    @media (max-width: 905px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\nexport const Title=styled.h1`\r\n    \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    @media (max-width: 280px) {\r\n        \r\n        display: none;\r\n    }\r\n\r\n    @media (max-width: 540px) {\r\n        display: none;   \r\n    }\r\n\r\n    \r\n`;\r\nexport const Image=styled.img`\r\n    height: 70px;\r\n    animation: rotation 20s infinite linear;\r\n    margin-right: 40px;\r\n\r\n    @media (max-width: 280px) {\r\n        margin-right: 0;\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n    @media (max-width: 540px) {\r\n        margin-right:0;\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n        @keyframes rotation {\r\n            from {\r\n                transform: rotate(0deg);\r\n            }\r\n            to {\r\n                transform: rotate(359deg);\r\n            }\r\n        }\r\n`;\r\nexport const Container=styled.div`\r\n    \r\n    width: 100%;\r\n    height: fit-content;\r\n    \r\n    \r\n\r\n`;\r\n\r\nexport const CardContainer=styled.div`\r\n    width: 100%;\r\n    \r\n\r\n`;\r\nexport const Select=styled.select`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    height: 30px;\r\n    \r\n\r\n`;\r\nexport const Option=styled.option`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n\r\n`;\r\nexport default TopBar\r\n","import './App.css';\r\nimport TopBar from './components/TopBar';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TopBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}